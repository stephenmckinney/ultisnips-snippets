###########################
# Contoller methods
###########################

snippet bf "before_filter"
 before_filter :${1:method}
endsnippet

snippet defcreate "def create"
def create
  @${1:model_class_name} = ${2:ModelClassName}.new(params[:$1])
  respond_to do |wants|
    if @$1.save
      flash[:notice] = '$2 was successfully created.'
      wants.html { redirect_to(@$1) }
      wants.xml  { render :xml => @$1, :status => :created, :location => @$1 }
    else
      wants.html { render :action => "new" }
      wants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }
    end
  end
end${3}
endsnippet

snippet defdestroy "def destroy"
def destroy
  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
  @$1.destroy
  respond_to do |wants|
    wants.html { redirect_to($1s_url) }
    wants.xml  { head :ok }
  end
end${3}
endsnippet

snippet defedit "def edit"
def edit
  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
end
endsnippet

snippet defindex "def index"
def index
  @${1:model_class_name}s = ${2:ModelClassName}.all
  respond_to do |wants|
    wants.html # index.html.erb
    wants.xml  { render :xml => @$1s }
  end
end${3}
endsnippet

snippet defnew "def new"
def new
  @${1:model_class_name} = ${2:ModelClassName}.new
  respond_to do |wants|
    wants.html # new.html.erb
    wants.xml  { render :xml => @$1 }
  end
end${3}
endsnippet

snippet defshow "def show"
def show
  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
  respond_to do |wants|
    wants.html # show.html.erb
    wants.xml  { render :xml => @$1 }
  end
end${3}
endsnippet

snippet defupdate "def update"
def update
  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
  respond_to do |wants|
    if @$1.update_attributes(params[:$1])
      flash[:notice] = '$2 was successfully updated.'
      wants.html { redirect_to(@$1) }
      wants.xml  { head :ok }
    else
      wants.html { render :action => "edit" }
      wants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }
    end
  end
end${3}
endsnippet

###########################
# ActiveRecord Finders
###########################

snippet fin "find"
find(${1:id})${2}
endsnippet

snippet fina "find(:all)"
find(:all, :conditions => ['${1:field} = ?', ${2:true}])${3}
endsnippet

snippet finf "find(:first)"
find(:first, :conditions => ['${1:field} = ?', ${2:true}])${3}
endsnippet

snippet finl "find(:last)"
find(:last, :conditions => ['${1:field} = ?', ${2:true}])${3}
endsnippet

###########################
# ActiveRecord Associations
###########################

snippet bt "belongs_to"
belongs_to :${1:association}
endsnippet

snippet habtm "has_and_belongs_to_many"
has_and_belongs_to_many :${1:object}, :join_table => "${2:table_name}", :foreign_key => "${3}_id"${4}
endsnippet

snippet hm "has_many"
has_many :${1:object}
endsnippet

snippet hmd "has_many"
has_many :${1:object}s${2:, :class_name => "${1}", :foreign_key => "${4:reference}_id"}
endsnippet

snippet hmt "has_many"
has_many :${1:object}, :through => :${2:object}
endsnippet

snippet ho "has_one"
has_one :${1:object}
endsnippet

###########################
# Logger
###########################

snippet log "Rails.logger"
Rails.logger.${1:debug} "${2:message}"${3}
endsnippet

snippet logc "Rails.logger.debug w/ color"
Rails.logger.debug "${1:message}".white_on_red
endsnippet

snippet logd "Rails.logger.debug"
Rails.logger.debug "${1:message}"
endsnippet

snippet loge "Rails.logger.error"
Rails.logger.error "${1:message}"
endsnippet

snippet logf "Rails.logger.fatal"
Rails.logger.fatal "${1:message}"
endsnippet

snippet logi "Rails.logger.info"
Rails.logger.info "${1:message}"
endsnippet

snippet logw "Rails.logger.warn"
Rails.logger.warn "${1:message}"
endsnippet

snippet logp "Rails.logger.debug params"
Rails.logger.debug "params START".white_on_red
params.each {|k,v| Rails.logger.debug "key: #{k}, val: #{v}".white_on_red}
Rails.logger.debug "params END".white_on_red
endsnippet

###########################
# Migrations
###########################

snippet mac "add_column"
add_column :${1:table_name}, :${2:column_name}, :${3:type}
endsnippet

snippet mai "add_index"
add_index :${1:table_name}, :${2:column_name}
endsnippet

snippet mcc "change_column"
change_column :${1:table_name}, :${2:column_name}, :${3:type}
endsnippet

snippet mrc "remove_column"
remove_column :${1:table_name}, :${2:column_name}
endsnippet

snippet mri "remove_index"
remove_index :${1:table_name}, :${2:old_name}, :${3:new_name}
endsnippet

snippet mrc "rename_column"
rename_column :${1:table_name}, :${2:old_name}, :${3:new_name}
endsnippet

snippet mct "create_table"
create_table :${1:table_name} do |t|
  t.column_name :${2:name}, :${3:type}
end
endsnippet

###########################
# Routes
###########################

snippet mapc "mapc"
${1:map}.${2:connect} '${3:controller/:action/:id}'
endsnippet

snippet mapca "mapca"
${1:map}.catch_all "*${2:anything}", :controller => "${3:default}", :action => "${4:error}"${5}
endsnippet

snippet mapr "mapr"
${1:map}.resource :${2:resource}
endsnippet

snippet maprs "maprs"
${1:map}.resources :${2:resource}
endsnippet

snippet mapwo "mapwo"
${1:map}.with_options :${2:controller} => '${3:thing}' do |$3|
  ${4}
end
endsnippet

snippet anaf "accepts_nested_attributes_for"
accepts_nested_attributes_for :${1:object}
endsnippet

snippet art "assert_redirected_to"
assert_redirected_to ${1::action => "${2:index}"}
endsnippet

snippet artnp "assert_redirected_to"
assert_redirected_to ${2:${12:parent}_${13:child}_path(${14:@}${15:${12}}, ${16:@}${17:${13}})}
endsnippet

snippet artnpp "assert_redirected_to"
assert_redirected_to ${10:${2:parent}_${3:child}_path(${4:@}${5:${2}})}
endsnippet

snippet artp "assert_difference"
assert_redirected_to ${2:${12:model}_path(${13:@}${14:${12}})}
endsnippet

snippet artpp "assert_no_difference"
assert_redirected_to ${10:${2:model}s_path}
endsnippet

snippet asd "assert_difference"
assert_difference "${1:Model}.${2:count}", $1 do
  ${3}
end
endsnippet

snippet asnd "assert_no_difference"
assert_no_difference "${1:Model}.${2:count}" do
  ${3}
end
endsnippet

snippet asre "assert_select"
assert_response :${1:success}, @response.body${2}
endsnippet

snippet asrj "assert_rjs"
assert_rjs :${1:replace}, ${2:"${3:dom id}"}
endsnippet

snippet ass "assert_select"
assert_select '${1:path}'${2:, :${3:text} => ${4:'${5:inner_html}'}}${6: do
  $0
end}
endsnippet

snippet clam "an ActiveRecord class" !b
class ${1:Model} < ActiveRecord::Base
  ${0}
end
endsnippet

snippet crw "cattr_accessor"
cattr_accessor :${1:attr_names}
endsnippet

snippet flash "flash[:notice]"
flash[:${1:notice}] = "${2}"
endsnippet

snippet i18 "I18n"
I18n.t('${1:type.key}')${2}
endsnippet

snippet ist "image_submit_tag"
<%= image_submit_tag("<+agree.png+>"<+<+, :id => "<+id+>"+><+, :name => "<+name+>"+><+, :class => "<+class+>"+><+, :disabled => <+false+>+>+>) %>
endsnippet

snippet mbs "mbs"
before_save :${1:method}
endsnippet

snippet mrw "mrw"
mattr_accessor :${1:attr_names}
endsnippet

snippet nc "nc"
named_scope :${1:name}${2:, :joins => :${3:table}}, :conditions => ${4:['${5:${6:field} = ?}', ${7:true}]}
endsnippet

snippet ncl "ncl"
named_scope :${1:name}, lambda { |${2:param}| { :conditions => ${3:['${4:${5:field} = ?}', ${6:$2}]} } }
endsnippet

snippet pa "pa"
params[:${1:id}]${2}
endsnippet

snippet ra "ra"
render :action => "${1:action}"
endsnippet

snippet ral "ral"
render :action => "${1:action}", :layout => "${2:layoutname}"
endsnippet

snippet rest "rest"
respond_to do |wants|
  wants.${1:html}${2: { $0 \}}
end
endsnippet

snippet rf "rf"
render :file => "${1:filepath}"
endsnippet

snippet rfu "rfu"
render :file => "${1:filepath}", :use_full_path => ${2:false}
endsnippet

snippet ri "ri"
render :inline => "${1:<%= 'hello' %>}"
endsnippet

snippet ril "ril"
render :inline => "${1:<%= 'hello' %>}", :locals => { ${2::name} => "${3:value}"${4} }
endsnippet

snippet rit "rit"
render :inline => "${1:<%= 'hello' %>}", :type => ${2::rxml}
endsnippet

snippet rjson "rjson"
render :json => ${1:text to render}
endsnippet

snippet rl "rl"
render :layout => "${1:layoutname}"
endsnippet

snippet rn "rn"
render :nothing => ${1:true}
endsnippet

snippet rns "rns"
render :nothing => ${1:true}, :status => ${2:401}
endsnippet

snippet rp "rp"
render :partial => "${1:item}"
endsnippet

snippet rpc "rpc"
render :partial => "${1:item}", :collection => ${2:@$1s}
endsnippet

snippet rpl "rpl"
render :partial => "${1:item}", :locals => { :${2:$1} => ${3:@$1}$0 }
endsnippet

snippet rpo "rpo"
render :partial => "${1:item}", :object => ${2:@$1}
endsnippet

snippet rps "rps"
render :partial => "${1:item}", :status => ${2:500}
endsnippet

snippet rt "rt"
render :text => "${1:text to render...}", :layout => "${2:layoutname}"
endsnippet

snippet rtl "rtl"
render :text => "${1:text to render}", :layout => "${2:layoutname}"
endsnippet

snippet rtlt "rtlt"
render :text => "${1:text to render}", :layout => ${2:true}
endsnippet

snippet rts "rts"
render :text => "${1:text to render}", :status => ${2:401}
endsnippet

snippet ru "ru"
render :update do |${1:page}|
  $1.${2}
end
endsnippet

snippet rxml "rxml"
render :xml => ${1:text to render}
endsnippet

snippet sha1 "sha1"
Digest::SHA1.hexdigest(${1:string})
endsnippet

snippet sweeper "sweeper"
class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper
  observe $1
  def after_save(${2:model_class_name})
    expire_cache($2)
  end
  def after_destroy($2)
    expire_cache($2)
  end
  def expire_cache($2)
    expire_page
  end
end
endsnippet

snippet tcb "tcb"
t.boolean :${1:title}
${2}
endsnippet

snippet tcbi "tcbi"
t.binary :<+title+><+, :limit => <+2+>.megabytes+>
<++>
endsnippet

snippet tcd "tcd"
t.decimal :${1:title}<+<+, :precision => <+10+>+><+, :scale => <+2+>+>+>
<++>
endsnippet

snippet tcda "tcda"
t.date :${1:title}
${2}
endsnippet

snippet tcdt "tcdt"
t.datetime :${1:title}
${2}
endsnippet

snippet tcf "tcf"
t.float :${1:title}
${2}
endsnippet

snippet tch "tch"
t.change :${1:name}${2:, :${3:string}${4:, :${5:limit} => ${6:80}}}
t.$0
endsnippet

snippet tci "tci"
t.integer :${1:title}
${2}
endsnippet

snippet tcl "tcl"
t.integer :lock_version, :null => false, :default => 0
${1}
endsnippet

snippet tcr "tcr"
t.references :${1:taggable}${2:, :polymorphic => ${3:{ :default => '${4:Photo}' \}}}
t.$0
endsnippet

snippet tcs "tcs"
t.string :${1:title}
${2}
endsnippet

snippet tct "tct"
t.text :${1:title}
${2}
endsnippet

snippet tcti "tcti"
t.time :${1:title}
${2}
endsnippet

snippet tcts "tcts"
t.timestamp :${1:title}
${2}
endsnippet

snippet tctss "tctss"
t.timestamps
${1}
endsnippet

snippet test "test"
test "${1:case_name}" do
  ${2}
end
endsnippet

snippet trc "trc"
t.remove :${1:column}
endsnippet

snippet tre "tre"
t.rename :${1:old_column_name}, :${2:new_column_name}
t.$0
endsnippet

snippet tref "tref"
t.references :${1:model}
endsnippet

snippet va "va"
validates_associated :${1:attribute}
endsnippet

snippet vao "vao"
validates_acceptance_of :${1:terms}
endsnippet

snippet vc "vc"
validates_confirmation_of :${1:attribute}
endsnippet

snippet ve "ve"
validates_exclusion_of :${1:attribute}, :in => ${2:%w( mov avi )}
endsnippet

snippet vf "vf"
validates_format_of :${1:attribute}, :with => /${2:regex}/
endsnippet

snippet vi "vi"
validates_inclusion_of :${1:attribute}, :in => %w(${2: mov avi })
endsnippet

snippet vl "vl"
validates_length_of :${1:attribute}, :within => ${2:3}..${3:20}
endsnippet

snippet vn "vn"
validates_numericality_of :${1:attribute}
endsnippet

snippet vp "vp"
validates_presence_of :${1:attr}
endsnippet

snippet vpo "vpo"
validates_presence_of :${1:attribute}
endsnippet

snippet vu "vu"
validates_uniqueness_of :${1:attribute}
endsnippet

snippet wants "wants"
wants.<+js|xml|html+> <+{ <++> }+>
endsnippet

snippet xdelete "xdelete"
xhr :delete, :${1:destroy}, :id => ${2:1}${3}
endsnippet

snippet xget "xget"
xhr :get, :<+show+><+, :id => <+1+>+><++>
endsnippet

snippet xpost "xpost"
xhr :post, :${1:create}, :${2:object} => { ${3} }
endsnippet

snippet xput "xput"
xhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}
endsnippet

# vim:ft=snippets:
